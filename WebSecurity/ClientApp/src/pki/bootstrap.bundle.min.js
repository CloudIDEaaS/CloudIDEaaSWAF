let params = (new URL(document.location)).searchParams;
let test = params.get("test");

if (test == true) {
  runStartupTests();
}

console.debug("looking for DomContent");

document.addEventListener("DOMContentLoaded", (event) => {

  console.debug("DomContent loaded. Importing bundle ****************************************************************************************************************************************************");

  import('./bundle/bundle.js').then(async (b) => {

    // kn todo * remove this
    // const p1 = new Promise((res) => setTimeout(() => res(["error", ""]), 500));
    // let p2 = b.handle(3361923221);
    // let result = await Promise.race(p1, p2);

    let α;
    let β;
    let τ;

    let splashScreen = document.getElementById("splash-screen");

    console.debug("Bundle imported");

    window["π"] = b;

    try {
      console.debug("Bundle being handled");
      [α, β, τ] = await b.handle(3361923221);

      if (β === undefined) {
        console.error(α);
        window["ξ"] = α;
      }
      else {
        window["α"] = α;
        window["β"] = β;
        window["τ"] = τ;
      }
    }
    catch (e) {
      window["ξ"] = e;
      console.error(e);
    }
    finally {
      setTimeout(() => {

        splashScreen.classList.add("splash-screen-hide");

        setTimeout(() => {

          splashScreen.setAttribute("position", "fixed");
          splashScreen.setAttribute("display", "none");
          splashScreen.remove();

          console.debug("Exiting DomContent loaded ****************************************************************************************************************************************************");

        }, 1000);

      }, 3000);
    }
  });
});


function runStartupTests() {

  import('./bundle/bundle.js').then(async (b) => {

    try {
      var ms;
      var xor;
      var xora;
      var xorCheck;
      var playback;
      var dec;
      var inputs = [[192, "z"], [3361923221, "=AjBcz8XK5g"], [33619, "=AjBcz8XK5g"]];

      inputs.forEach(([maskNum, input]) => {

        ms = b.dec2bin(maskNum);
        dec = b.bin2dec(ms);

        if (Math.sign(maskNum) == 1) {

          maskNum = b.unsigned(maskNum);

          if (dec != maskNum) {
            alert(`bin2dec, dec2bin in runStartupTests did not match`);
          }
        }

        if (dec != maskNum) {
          alert(`bin2dec, dec2bin in runStartupTests did not match`);
        }

        if (String.fromCharCode(input.charCodeAt(0)) == input) {

          xor = b.xor(ms, input);

          if (isNaN(xor)) {
            alert(`xor in runStartupTests is not a number`);
          }

          playback = b.xor(ms, String.fromCharCode(xor));

          if (isNaN(playback)) {
            alert(`xor check playback in runStartupTests is not a number`);
          }

          xorCheck = String.fromCharCode(playback);

          if (xorCheck != input) {
            alert(`xor check in runStartupTests failed`);
          }
        }

        xora = b.xora(ms, input);
        playback = b.xora(ms, xora);

        if (playback != input) {
          alert(`playback length in runStartupTests did not match`);
        }
      });
    }
    catch (e) {
      alert(`Error in runStartupTests: ${e}`)
    }
  });
}
